/* ELM                                                                        */
/* Copyright (C) 2024  Miles McGruder                                         */
/*                                                                            */
/* This program is free software: you can redistribute it and/or modify       */
/* it under the terms of the GNU General Public License as published by       */
/* the Free Software Foundation, either version 3 of the License, or          */
/* (at your option) any later version.                                        */
/*                                                                            */
/* This program is distributed in the hope that it will be useful,            */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of             */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              */
/* GNU General Public License for more details.                               */
/*                                                                            */
/* You should have received a copy of the GNU General Public License          */
/* along with this program.  If not, see <https://www.gnu.org/licenses/>.     */


#version 450


layout(local_size_x = 128) in;


layout(std430, set = 0, binding = 0) buffer state_params {
  uint  p;
  uint  q;
  uint  nelem;
  uint  etype;
  uint  dim;
  uint  nbfp;
  uint  nbfq;
  float gamma;
} params;
layout(std430, set = 0, binding = 1) buffer out_bounds { vec2  bounds[]; };
layout(std430, set = 0, binding = 2) buffer out_bvals  { float bvals[];  };


void main()
{
  uint elem = gl_GlobalInvocationID.x;

  if (elem < params.nelem)
  {
    vec2 ebound = bounds[elem];

    bvals[elem]                = ebound.x;
    bvals[elem + params.nelem] = ebound.y;
  }
}
